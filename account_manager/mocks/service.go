// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "github.com/sonalys/letterme/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddNewDevice provides a mock function with given fields: accountID
func (_m *Service) AddNewDevice(accountID models.DatabaseID) (*models.EncryptedBuffer, error) {
	ret := _m.Called(accountID)

	var r0 *models.EncryptedBuffer
	if rf, ok := ret.Get(0).(func(models.DatabaseID) *models.EncryptedBuffer); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EncryptedBuffer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.DatabaseID) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authenticate provides a mock function with given fields: Address
func (_m *Service) Authenticate(Address models.Address) (*models.EncryptedBuffer, error) {
	ret := _m.Called(Address)

	var r0 *models.EncryptedBuffer
	if rf, ok := ret.Get(0).(func(models.Address) *models.EncryptedBuffer); ok {
		r0 = rf(Address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EncryptedBuffer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Address) error); ok {
		r1 = rf(Address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: account
func (_m *Service) CreateAccount(account models.Account) (string, error) {
	ret := _m.Called(account)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.Account) string); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKey provides a mock function with given fields: address
func (_m *Service) GetPublicKey(address models.Address) (*models.PublicKey, error) {
	ret := _m.Called(address)

	var r0 *models.PublicKey
	if rf, ok := ret.Get(0).(func(models.Address) *models.PublicKey); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPublicKey provides a mock function with given fields: accountID
func (_m *Service) ResetPublicKey(accountID models.DatabaseID) (*models.Account, error) {
	ret := _m.Called(accountID)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(models.DatabaseID) *models.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.DatabaseID) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
