// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	messaging "github.com/sonalys/letterme/domain/messaging"
	mock "github.com/stretchr/testify/mock"
)

// Messenger is an autogenerated mock type for the Messenger type
type Messenger struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Messenger) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: ctx, queue, handler
func (_m *Messenger) Consume(ctx context.Context, queue messaging.Queue, handler messaging.DeliveryHandler) error {
	ret := _m.Called(ctx, queue, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, messaging.Queue, messaging.DeliveryHandler) error); ok {
		r0 = rf(ctx, queue, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateQueue provides a mock function with given fields: name
func (_m *Messenger) CreateQueue(name messaging.Queue) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(messaging.Queue) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteQueue provides a mock function with given fields: name, forceDelete
func (_m *Messenger) DeleteQueue(name messaging.Queue, forceDelete bool) error {
	ret := _m.Called(name, forceDelete)

	var r0 error
	if rf, ok := ret.Get(0).(func(messaging.Queue, bool) error); ok {
		r0 = rf(name, forceDelete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: queue, m
func (_m *Messenger) Publish(queue messaging.Queue, m messaging.Message) error {
	ret := _m.Called(queue, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(messaging.Queue, messaging.Message) error); ok {
		r0 = rf(queue, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
