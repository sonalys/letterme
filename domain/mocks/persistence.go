// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/sonalys/letterme/domain/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// Persistence is an autogenerated mock type for the Persistence type
type Persistence struct {
	mock.Mock
}

// CreateCollection provides a mock function with given fields: colName, indexes
func (_m *Persistence) CreateCollection(colName string, indexes []map[string]interface{}) (interfaces.Collection, error) {
	ret := _m.Called(colName, indexes)

	var r0 interfaces.Collection
	if rf, ok := ret.Get(0).(func(string, []map[string]interface{}) interfaces.Collection); ok {
		r0 = rf(colName, indexes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []map[string]interface{}) error); ok {
		r1 = rf(colName, indexes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCollection provides a mock function with given fields: ctx, colName
func (_m *Persistence) DeleteCollection(ctx context.Context, colName string) error {
	ret := _m.Called(ctx, colName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, colName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCollection provides a mock function with given fields: colName
func (_m *Persistence) GetCollection(colName string) interfaces.Collection {
	ret := _m.Called(colName)

	var r0 interfaces.Collection
	if rf, ok := ret.Get(0).(func(string) interfaces.Collection); ok {
		r0 = rf(colName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Collection)
		}
	}

	return r0
}

// Wait provides a mock function with given fields:
func (_m *Persistence) Wait() <-chan bool {
	ret := _m.Called()

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}
